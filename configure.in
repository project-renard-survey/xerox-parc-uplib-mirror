# Process this file with autoconf to produce a configure script.
#
# This file is part of the "UpLib 1.7.11" release.
# Copyright (C) 2003-2011  Palo Alto Research Center, Inc.
# 
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
#

AC_INIT(UpLib, [1.7.11], uplib-bugs@parc.com)

if test "x$prefix" = "xNONE"; then
  UPLIB_HOME="/usr/local"
else
  UPLIB_HOME=$prefix
fi
if test "x$exec_prefix" = "xNONE"; then
  UPLIB_EXEC="$UPLIB_HOME"
else
  UPLIB_EXEC=$exec_prefix
fi
UPLIB_LIB=$UPLIB_EXEC/lib/${PACKAGE_NAME}-${PACKAGE_VERSION}
UPLIB_BIN=$UPLIB_EXEC/bin
UPLIB_SHARE=$UPLIB_HOME/share/${PACKAGE_NAME}-${PACKAGE_VERSION}
UPLIB_CODE=$UPLIB_SHARE/code
AC_SUBST(UPLIB_HOME)
AC_SUBST(UPLIB_SHARE)
AC_SUBST(UPLIB_EXEC)
AC_SUBST(UPLIB_LIB)
AC_SUBST(UPLIB_BIN)
AC_SUBST(UPLIB_CODE)
AC_SUBST(PACKAGE_VERSION)

# to support Windows compatibility
UPLIB_ADD_PROGRAM=$UPLIB_EXEC/bin/uplib-add-document
UPLIB_GET_PROGRAM=$UPLIB_EXEC/bin/uplib-get-document
UPLIB_CHECK_ANGEL_PROGRAM=$UPLIB_EXEC/bin/uplib-check-angel
AC_SUBST(UPLIB_ADD_PROGRAM)
AC_SUBST(UPLIB_GET_PROGRAM)
AC_SUBST(UPLIB_CHECK_ANGEL_PROGRAM)

#make sure the check for libraries looks in the UpLib library directory
if test "x$LDFLAGS" = "x"; then
  LDFLAGS="-L${UPLIB_EXEC}/lib"
else
  LDFLAGS="${LDFLAGS} -L${UPLIB_EXEC}/lib"
fi

#make sure the check for header files looks in the UpLib includes directory
if test "x$CPPFLAGS" = "x"; then
  CPPFLAGS="-I${UPLIB_HOME}/include -I${UPLIB_HOME}/include/leptonica -I${UPLIB_HOME}/include/liblept"
else
  CPPFLAGS="${CPPFLAGS} -I${UPLIB_HOME}/include -I${UPLIB_HOME}/include/leptonica -I${UPLIB_HOME}/include/liblept"
fi

# Checks for programs.

#make sure we look in the bin directory under UPLIB_HOME, if any
if test -d "${UPLIB_HOME}/bin"; then
   export PATH="${UPLIB_HOME}/bin:${PATH}"
fi

# first, see if we have a satisfactory Python

AC_PATH_PROG(PYTHON, python)
if test "X$PYTHON" = "X"; then
    AC_MSG_ERROR("Unable to find python")
fi
AC_MSG_CHECKING(Python version)
PYTHON_MAJOR_LIBVER=[`$PYTHON -c "\
import sys, string
print string.splitfields(string.splitfields(sys.version, ' ')[0], '.')[0]"`]
PYTHON_MINOR_LIBVER=[`$PYTHON -c "\
import sys, string
print string.splitfields(string.splitfields(sys.version, ' ')[0], '.')[1]"`]
PYTHON_MINOR_MINOR_VER=[`$PYTHON -c "\
import sys, string
fields = string.splitfields(string.splitfields(sys.version, ' ')[0], '.')
if (len(fields) > 2) and (fields[2][0] in '0123456789'):
  print fields[2][0]
else:
  print '0'"`]
AC_MSG_RESULT($PYTHON_MAJOR_LIBVER.$PYTHON_MINOR_LIBVER.$PYTHON_MINOR_MINOR_VER)
python_version_required=[`$PYTHON -c "\
import platform
py_maj_ver, py_min_ver = [int(x) for x in platform.python_version_tuple()[:2]]
if platform.system().lower() == 'linux':
   linux_maj_ver, linux_min_ver = [int(x) for x in platform.release().split('.')[:2]]
   if linux_maj_ver >= 2 and linux_min_ver >= 5 and (py_maj_ver < 2 or py_min_ver < 4):
     print '2.4'
   else:
     print 'ok'
elif py_maj_ver < 2 or py_min_ver < 3:
   print '2.3'
else:
   print 'ok'
"`]
if test "$python_version_required" != "ok"; then
   AC_MSG_ERROR(Can't continue -- need Python version $python_version_required on this system.)
fi
if test $PYTHON_MAJOR_LIBVER -lt 2 -o $PYTHON_MINOR_LIBVER -lt 3; then
  AC_MSG_ERROR(["Python version too low -- at least 2.3 is required."])
fi

# Now check OS -- we need this here for msys

AC_MSG_CHECKING(operating system)
OS_TARGET=[`$PYTHON -c "\
import os, sys
if hasattr(os, 'uname'):
   osname = os.uname()[0]
else:
   osname = sys.platform
print osname"`]
AC_MSG_RESULT($OS_TARGET)
AC_SUBST(OS_TARGET)

# And check lang -- for indexing
AC_MSG_CHECKING(default language)
AC_SUBST(DEFAULT_LANGUAGE)
DEFAULT_LANGUAGE=[`$PYTHON -c "\
import locale, re
l = locale.getdefaultlocale()[0]
if l:
   l = re.search('^[A-Za-z]+', l).group()
else:
   l = 'en'
print l
"`]
AC_MSG_RESULT($DEFAULT_LANGUAGE)

# it would be nice to know where JAVA_HOME is

AC_ARG_WITH(javahome, [  --with-javahome=JAVA_HOME_PATH], java_home=$with_javahome, java_home="")
if test "x$java_home" != "x"; then
  AC_MSG_CHECKING(JAVA_HOME value)
  if test -d "$java_home"; then
    JAVAHOME=$java_home
    AC_SUBST(JAVAHOME)
    AC_MSG_RESULT([$JAVAHOME])
  else
    AC_MSG_ERROR([Invalid non-directory value specified for --with-javahome])
  fi
fi
if test "x$JAVAHOME" = "x"; then
  if test "$OS_TARGET" = "Linux"; then
     AC_MSG_CHECKING(for JAVA_HOME)
     JAVAHOME=`$PYTHON unix/linux/figure-linux-java.py`
     if test "$JAVAHOME" != ""; then
        AC_MSG_RESULT($JAVAHOME)
     else
        AC_MSG_RESULT(no java installation found on this machine.)
     fi
  elif test "$OS_TARGET" = "Darwin"; then
     if test -x /usr/libexec/java_home; then
        JAVAHOME=`/usr/libexec/java_home -v 1.5+`
     else
        JAVAHOME=/Library/Java/Home
     fi
  elif test "$OS_TARGET" = "win32"; then
     AC_MSG_CHECKING(for JAVA_HOME)
     JAVAHOME=`"$PYTHON" win32/find-javahome.py --msys`
     if test "$JAVAHOME" != ""; then
        AC_MSG_RESULT($JAVAHOME)
     else
        AC_MSG_RESULT(no java installation found on this machine.)
     fi
  else
     AC_PATH_PROG(JAVAC, "javac")
     AC_PATH_PROG(JAVA, "java")
     if test "x$JAVAC" = "x" -o "x$JAVA" = "x"; then
       AC_MSG_RESULT([No value for Java home, and either "java" or "javac" can't be found on the path.])
     else
       AC_MSG_CHECKING(for JAVA_HOME)
       result=`["$JAVAC" -classpath ./java ./java/testProperty.java; "$JAVA" -classpath ./java testProperty home.java]`
       if test -d "$result"; then
         JAVAHOME=$result
         AC_MSG_RESULT([$JAVAHOME])
       else
         AC_MSG_RESULT([Can't find JAVA_HOME; use --with-javahome=PATH to specify the path for JAVA_HOME])
       fi
    fi
  fi
fi

# Make sure we have any library directories on our Python sys.path

AC_SUBST(UPLIB_SITE_PACKAGES_PLAT)
AC_SUBST(UPLIB_SITE_PACKAGES_NONPLAT)
platlib=[`$PYTHON -c "import distutils.sysconfig as sc; print sc.get_python_lib(plat_specific=True, prefix='${UPLIB_HOME}')"`]
nonplat=[`$PYTHON -c "import distutils.sysconfig as sc; print sc.get_python_lib(plat_specific=False, prefix='${UPLIB_HOME}')"`]
ppath=${PYTHONPATH}
if test -d "$platlib"; then
   if test "x$ppath" = "x"; then
      ppath="$platlib"
   else
      ppath="${platlib}:${ppath}"
   fi
fi
if test -d "$nonplat"; then
   if test "x$ppath" = "x"; then
      ppath="$nonplat"
   else
      ppath="${nonplat}:${ppath}"
   fi
fi
export PYTHONPATH=${ppath}
UPLIB_SITE_PACKAGES_PLAT="$platlib"
UPLIB_SITE_PACKAGES_NONPLAT="$nonplat"
if test "x$PYTHONPATH" != "x"; then
  AC_MSG_RESULT([Using PYTHONPATH of $PYTHONPATH for tests...])
else
  AC_MSG_RESULT([No UpLib-specific site-packages directories found under $UPLIB_HOME.])
fi
if test "$OS_TARGET" = "win32"; then
  # need Java DLL for PyLucene test
  export PATH="${PATH}:${JAVAHOME}/jre/bin/client"
  echo "Using PATH of ${PATH} to pick up Java DLL"
fi

# now check for Python libraries

   AC_MSG_CHECKING(for Python support for PIL)
   python_PIL_version=[`$PYTHON -c "\
try:
   from PIL import Image
   import re, string;
   m = re.match('(\d+)\.(\d+)\.(\d)', Image.VERSION)
   if string.atoi(m.group(1)) >= 1 and string.atoi(m.group(2)) >= 1 and string.atoi(m.group(3)) >= 5:
      print 'yes'
   else:
      print 'no'
except:
   print 'no'"`]
   AC_MSG_RESULT($python_PIL_version)

   AC_MSG_CHECKING(for Python support for Medusa)
   python_has_medusa=[`$PYTHON -c "\
try:
   import medusa
   print 'yes'
except:
   print 'no'"`]
   AC_MSG_RESULT($python_has_medusa)

   AC_MSG_CHECKING(for Tornado web framework)
   python_has_tornado=[`$PYTHON -c "\
try:
   from tornado.web import RequestHandler
   from tornado import version
   print version
except:
   print 'no'"`]
   AC_MSG_RESULT($python_has_tornado)

   AC_MSG_CHECKING(for Python SSL module)
   python_has_ssl=[`$PYTHON -c "\
try:
   import ssl
   print 'yes'
except:
   print 'no'"`]
   AC_MSG_RESULT($python_has_ssl)

   if test "$python_has_ssl" = "no"; then
     AC_MSG_CHECKING(for old-style Python SSL support)
     python_has_socket_ssl=[`$PYTHON -c "import socket; print (hasattr(socket, 'ssl') and 'yes') or 'no'"`]
     AC_MSG_RESULT($python_has_socket_ssl)
   else
     python_has_socket_ssl="yes"
   fi

   AC_SUBST(PYTHON_HAS_GUESS_LANGUAGE)
   AC_MSG_CHECKING(for Python guess_language module)
   PYTHON_HAS_GUESS_LANGUAGE=[`$PYTHON -c "\
try:
   import guess_language
   print 'true'
except:
   print 'false'"`]
   AC_MSG_RESULT($PYTHON_HAS_GUESS_LANGUAGE)

   AC_MSG_CHECKING(for Python support for ReportLab)
   python_has_reportlab=[`$PYTHON -c "\
try:
   from reportlab.pdfgen import canvas
   from reportlab.lib.units import inch
   from reportlab import Version
   versionparts = [int(x) for x in Version.split('.')]
   if (versionparts[0] > 1):
       print Version
   else:
       print 'no'
except:
   print 'no'"`]
   AC_MSG_RESULT($python_has_reportlab)

   AC_MSG_CHECKING(Python email module)
   python_has_email=[`$PYTHON -c "\
# first make sure the local site-packages comes before the regular lib, in case the
# user has installed a newer version of email
import sys
from distutils.sysconfig import get_python_lib
sys.path.insert(0, get_python_lib())
import email
versions = email.__version__.split('.')
if (not versions) or (int(versions[0]) < 4):
    print 'too old'
else:
    print 'yes'"`]
   AC_MSG_RESULT($python_has_email)

   AC_MSG_CHECKING(for Python bin directory)
   python_bin_dir=[`$PYTHON -c "import sys, os; print os.path.join(sys.exec_prefix, 'bin')"`]
   if test -d "$python_bin_dir"; then
     AC_MSG_RESULT($python_bin_dir)
   else
     python_bin_dir=[`$PYTHON -c "import sys, os; print os.path.join(sys.exec_prefix, 'Scripts')"`]
     if test -d "$python_bin_dir"; then
       AC_MSG_RESULT($python_bin_dir)
     else
       python_bin_dir=
       AC_MSG_RESULT([no directory found])
     fi
   fi

AC_SUBST(PYTHON_LIBDIR)

USE_PYLUCENE=false
AC_SUBST(USE_PYLUCENE)

AC_MSG_CHECKING(for Python support for PyLucene-JCC)
python_has_lucene=[`$PYTHON -c "\
try:
   import lucene
   if hasattr(lucene, 'VERSION'):
       print lucene.VERSION
   else:
       print 'yes'
except:
   print 'no'"`]
AC_MSG_RESULT($python_has_lucene)
if test $python_has_lucene != "no"; then
   USE_PYLUCENE="jcc+lucene-$python_has_lucene"
fi

AC_SUBST(JCC_VERSION)
AC_ARG_ENABLE(pylucene, [  --enable-pylucene], enable_pylucene="no", enable_pylucene="yes")
AC_MSG_CHECKING(user direction about PyLucene)
if test "$enable_pylucene" = "no"; then
   AC_MSG_RESULT([don't use it])
   USE_PYLUCENE="false"
   JCC_VERSION=""
elif test "$USE_PYLUCENE" = "false"; then
   AC_MSG_RESULT([no, because it's not installed])
   JCC_VERSION=""
else
   AC_MSG_RESULT([yes, using $USE_PYLUCENE version])
   AC_MSG_CHECKING(version of JCC in use)
   JCC_VERSION=[`$PYTHON -c "\
try:
   import jcc.config
   if hasattr(jcc.config, 'VERSION'):
       print jcc.config.VERSION
   else:
       print '2'
except:
   print 'no'"`]
   AC_MSG_RESULT($JCC_VERSION)   
fi

AC_MSG_CHECKING(for pychecker)
PYCHECKER=""
PYCHECKER_IN_PYTHON=[`$PYTHON -c "\
try:
   import pychecker
   print 'yes'
except:
   print 'no'"`]
if test "$PYCHECKER_IN_PYTHON" = "yes"; then
   EXEC_PATH=[`$PYTHON -c "\
import sys; print sys.exec_prefix"`]
   if test -f "$EXEC_PATH/bin/pychecker"; then
      AC_MSG_RESULT(yes)
      PYCHECKER="$EXEC_PATH/bin/pychecker"
   else
      AC_MSG_RESULT(no)
   fi
else
   AC_MSG_RESULT(no)
fi
AC_SUBST(PYCHECKER)

AC_SUBST(MACOSX_APP_DIRECTORY)
MACOSX_APP_DIRECTORY=
if test "$OS_TARGET" = "Darwin"; then
   AC_ARG_WITH(macosappdir, [  --with-macosappdir=DIR], mac_app_home=$with_macosappdir, mac_app_home="/Applications/Utilities")
   MACOSX_APP_DIRECTORY="$mac_app_home"
elif test "$OS_TARGET" = "win32"; then
   AC_PATH_PROG(PYTHONW, pythonw)
   if test "x$PYTHONW" != "x"; then
     PYTHON="$PYTHONW"
   fi
fi

AC_MSG_CHECKING(hostname)
HOSTNAME=[`$PYTHON -c "\
import socket, string, os
hostname = '*'
try:
    hostname = socket.getfqdn()
    if string.find(hostname, '.') < 0 and hasattr(os, 'uname'):
        hostname = os.uname()[1]
except:
    pass
print string.lower(hostname)"`]
AC_MSG_RESULT($HOSTNAME)
AC_SUBST(HOSTNAME)

AC_PATH_PROG(JAVA, "java", , [ ${JAVAHOME}/jre/bin:${JAVAHOME}/bin:$PATH ])
AC_PATH_PROG(JAVAC, "javac", , [ ${JAVAHOME}/jre/bin:${JAVAHOME}/bin:$PATH ])
AC_PATH_PROG(JAR, "jar", , [ ${JAVAHOME}/jre/bin:${JAVAHOME}/bin:$PATH ])
AC_PATH_PROG(JAVADOC, "javadoc", , [ ${JAVAHOME}/jre/bin:${JAVAHOME}/bin:$PATH ])
AC_PATH_PROG(KEYTOOL, "keytool", , [ ${JAVAHOME}/jre/bin:${JAVAHOME}/bin:$PATH ])
AC_PATH_PROG(JARSIGNER, "jarsigner", , [ ${JAVAHOME}/jre/bin:${JAVAHOME}/bin:$PATH ])

# need 1.4 compatibility?
AC_MSG_CHECKING(whether to preserve compatibility with Java 1.4)
AC_ARG_ENABLE(java-1-4-compatibility, [  --enable-java-1-4-compatibility], need1dot4="$enableval", need1dot4="no")
AC_MSG_RESULT($need1dot4)

if test "x$JAVAHOME" != "x"; then

  # what version of java?
  java_version=`"$JAVA" -version 2>&1 | head -1 | sed -e 's/java version //g' -e 's/"//g'`
  AC_SUBST(JAVA_MAJOR_VERSION)
  AC_SUBST(JAVA_MINOR_VERSION)
  AC_SUBST(JAVA_MICRO_VERSION)
  AC_MSG_RESULT([looking at Java version $java_version...])
  JAVA_MAJOR_VERSION=[`"$PYTHON" -c "\
import sys, re
print re.split('[\.\_]', '$java_version')[0]"`]
  JAVA_MINOR_VERSION=[`"$PYTHON" -c "\
import sys, re
print re.split('[\.\_]', '$java_version')[1]"`]
  JAVA_MICRO_VERSION=[`"$PYTHON" -c "\
import sys, re
print re.split('[\.\_]', '$java_version')[2]"`]
  JAVA_BUILD_VERSION=[`"$PYTHON" -c "\
import sys, re
splits=re.split('[\.\_]', '$java_version')
print ((len(splits) > 3) and splits[3]) or 5"`]
  AC_SUBST(JAVA_HOTSPOT_FLAGS)
  JAVA_HOTSPOT_FLAGS=""
  if test $JAVA_MAJOR_VERSION -eq 1 -a $JAVA_MINOR_VERSION -eq 6 -a $JAVA_MICRO_VERSION -eq 0 -a $JAVA_BUILD_VERSION -gt 3 -a $JAVA_BUILD_VERSION -lt 11 ; then
    JAVA_HOTSPOT_FLAGS="-Xint"
    AC_MSG_RESULT([This version of Java ($java_version) contains a Hotspot bug which causes corrupt Lucene indices.  JIT compilation will be disabled.])
  fi
  AC_SUBST(JAVA_COMPAT_FLAG)
  AC_SUBST(JAVA_HAS_COOKIE_HANDLING)
  JAVA_COMPAT_FLAG=""
  JAVA_HAS_COOKIE_HANDLING=yes
  if test $JAVA_MAJOR_VERSION -ge 1 -a $JAVA_MINOR_VERSION -gt 4 ; then
    if test "$need1dot4" = "yes" ; then
      JAVA_COMPAT_FLAG="-source 1.4 -target 1.4"
      JAVA_HAS_COOKIE_HANDLING=no
      AC_MSG_RESULT(Java version is $java_version; using JAVA_COMPAT_FLAG of "$JAVA_COMPAT_FLAG")
    else
      JAVA_COMPAT_FLAG="-source 1.5 -target 1.5"
      AC_MSG_RESULT(Java version is $java_version; no JAVA_COMPAT_FLAG needed)
    fi
  elif test $JAVA_MAJOR_VERSION -eq 1 -a $JAVA_MINOR_VERSION -lt 4; then
    AC_MSG_ERROR(Java version is $java_version; we need at least 1.4.2.)
  elif test $JAVA_MAJOR_VERSION -eq 1 -a $JAVA_MINOR_VERSION -eq 4 -a $JAVA_MICRO_VERSION -lt 2; then
    AC_MSG_ERROR(Java version is $java_version; we need at least 1.4.2.)
  else
    if test $JAVA_MINOR_VERSION -lt 5; then
      JAVA_HAS_COOKIE_HANDLING=no
    fi
    AC_MSG_RESULT(Java version is $java_version; no JAVA_COMPAT_FLAG needed)
  fi
  if test "$JAVA_HAS_COOKIE_HANDLING" = "no"; then
    AC_MSG_RESULT([No cookie handling in Java clients; password must be passed on each call])
  fi
  
  # check for Java debug flags
  AC_MSG_CHECKING(for Java debug)
  AC_ARG_ENABLE(java-debug, [  --enable-java-debug], JAVADEBUGFLAGS="$enableval", JAVADEBUGFLAGS="-g")
  AC_SUBST(JAVADEBUGFLAGS)
  if test "$JAVADEBUGFLAGS" = "no"; then
    AC_MSG_RESULT(no)
    JAVADEBUGFLAGS=""
  elif test "$JAVADEBUGFLAGS" = "yes"; then
    JAVADEBUGFLAGS="-g"
    AC_MSG_RESULT(yes:  $JAVADEBUGFLAGS)
  else
    if test $JAVA_MAJOR_VERSION -eq 1 -a $JAVA_MINOR_VERSION -eq 4; then
      JAVADEBUGFLAGS="$JAVADEBUGFLAGS -deprecation"
    fi
    AC_MSG_RESULT(yes:  $JAVADEBUGFLAGS)
  fi
  
  AC_MSG_CHECKING(for Java classpath separator character)
  AC_SUBST(JAVACLASSPATHSEP)
  if test "$OS_TARGET" = "win32"; then
    JAVACLASSPATHSEP=";"
  else
    JAVACLASSPATHSEP=":"
  fi
  AC_MSG_RESULT($JAVACLASSPATHSEP)
fi

# look for pdftotext
AC_ARG_WITH(pdftotext, [  --with-pdftotext=PATH], pdftotext=$with_pdftotext, pdftotext="")
if test "x$pdftotext" = "x"; then
  AC_PATH_PROG(PDFTOTEXT, "pdftotext")
else
  PDFTOTEXT="$pdftotext"
  AC_MSG_RESULT(checking for pdftotext... $PDFTOTEXT)
fi

# see if pdftotext supports "-wordboxes"
AC_MSG_CHECKING(for -wordboxes support in pdftotext)
AC_SUBST(WORDBOXES_PDFTOTEXT)
result=`["$PDFTOTEXT" -q -wordboxes pdftestpage.pdf testpdftotext.tmp 2>&1]`
if test "x$result" != "x"; then
  WORDBOXES_PDFTOTEXT=""
  AC_MSG_RESULT(no)
else
  WORDBOXES_PDFTOTEXT="$PDFTOTEXT"
  AC_MSG_RESULT(yes)
fi

AC_ARG_WITH(pdflinks, [  --with-pdflinks=PATH], pdflinks=$with_pdflinks, pdflinks="")
if test "x$pdflinks" = "x"; then
  AC_PATH_PROG(PDFLINKS, "pdflinks")
else
  AC_SUBST(PDFLINKS)
  PDFLINKS="$pdflinks"
  AC_MSG_RESULT(checking for pdflinks... $PDFLINKS)
fi

AC_PATH_PROGS(STUNNEL, [stunnel stunnel4], , [$PATH:/usr/local/sbin:/usr/sbin:/sbin:${UPLIB_EXEC}/sbin:/sw/sbin])
AC_SUBST(USE_STUNNEL)
if test "$python_has_ssl" = "yes" ; then
   USE_STUNNEL=false
else
   USE_STUNNEL=true
fi
AC_ARG_WITH(stunnel, [  --with-stunnel=PATH], stunnel="$with_stunnel", stunnel="")
if test "x$stunnel" = "xno" -a "$python_has_ssl" = "yes"; then
  USE_STUNNEL=false
  AC_MSG_RESULT([configuring to use direct Python SSL module instead of stunnel])
elif test "x$stunnel" = "x" -a "$python_has_ssl" = "yes"; then
  USE_STUNNEL=false
  AC_MSG_RESULT([configuring to use direct Python SSL module instead of stunnel])
elif test "x$stunnel" != "xyes" -a "$STUNNEL" != ""; then
  AC_MSG_RESULT(using stunnel at $STUNNEL)
elif test "x$stunnel" != "x"; then
  STUNNEL="$stunnel"
  AC_MSG_RESULT(using specified stunnel: $STUNNEL)
fi

# for JPEG2000 conversion
AC_PATH_PROGS(JASPER, [jasper.exe jasper])

AC_PATH_PROG(TAR, "tar")
AC_PATH_PROG(PDFINFO, "pdfinfo")
AC_PATH_PROG(DD, "dd",, [/bin:/usr/bin] )
AC_PATH_PROG(ETAGS, "etags")
AC_PATH_PROG(FIND, "find")
AC_PATH_PROG(TIFFSPLIT, "tiffsplit")
AC_PATH_PROG(TIFFCP, "tiffcp")
AC_PATH_PROG(TIFFSET, "tiffset")
AC_PATH_PROG(TIFFINFO, "tiffinfo")
AC_PATH_PROG(TIFF2PS, "tiff2ps")
AC_PATH_PROGS(GHOSTSCRIPT, [gs gswin32c.exe gswin32.exe])
AC_PATH_PROGS(PS2PDF, [ps2pdf.bat ps2pdf])
AC_PATH_PROGS(PDF2PS, [pdf2ps.bat pdf2ps])
AC_PATH_PROG(BOURNE_SHELL, "sh", "/bin/sh")
AC_PATH_PROG(OPENSSL, "openssl",, [/c/OpenSSL/bin:$PATH])
AC_PATH_PROG(TESTPROG, "test")
AC_PATH_PROG(SPLITUP, "splitup")
AC_PATH_PROG(MKTEMP, "mktemp", , [$PATH:/usr/sbin])
AC_PATH_PROG(KONQUEROR, "konqueror")
AC_PATH_PROG(NAUTILUS, "nautilus")                        
AC_PATH_PROG(TNEF, "tnef")
AC_PATH_PROG(EPM, "epm")
# try to figure out what the extension of the Linux package would be
AC_SUBST(LINUX_PACKAGE_EXTENSION)
AC_PATH_PROG(DPKG, "dpkg")
AC_PATH_PROG(RPM, "rpm")
if test "x$DPKG" != "x"; then
  LINUX_PACKAGE_EXTENSION=deb
elif test "x$RPM" != "x"; then
  LINUX_PACKAGE_EXTENSION=rpm
else
  LINUX_PACKAGE_EXTENSION=
fi

AC_ARG_ENABLE(config-errors, [  --disable-config-errors], configerrors="no", configerrors="yes")
if test $configerrors = "yes"; then
  if test $python_PIL_version = "no"; then
    AC_MSG_ERROR([Your Python doesn't have the appropriate Python Imaging Library (PIL) support -- 1.1.5 (or later) is required.])
  elif test $python_has_medusa = "no" -a $python_has_tornado = "no"; then
    AC_MSG_ERROR([Your Python doesn't have the appropriate Medusa or Tornado support -- Medusa 0.5.4 (or later) or Tornado 1.2 is required.  No guardian angel can be run.])
  elif test $python_has_reportlab = "no"; then
    AC_MSG_ERROR([Your Python doesn't have the appropriate ReportLab support -- 2.0 (or later) is required.])
  elif test $python_has_email = "too old"; then
    AC_MSG_ERROR([Your Python doesn't have the required email module -- 4.x (or later) is required.])
  elif test $python_has_socket_ssl = "no" -a $python_has_ssl = "no"; then
    AC_MSG_ERROR([Your Python doesn't have SSL support in the socket module.])
  fi
  if test "x$JAVAHOME" = "x"; then
     AC_MSG_ERROR([Can't determine location of JAVA_HOME.])
  fi
  if test "x$JAVA" = "x"; then
     AC_MSG_ERROR([No Java -- used for UI tools.])
  fi
  if test "x$PDFTOTEXT" = "x"; then
     AC_MSG_ERROR([No pdftotext -- used to extract text from text documents.])
  fi
  if test "x$GHOSTSCRIPT" = "x"; then
     AC_MSG_ERROR([No Ghostscript -- used to render page images from text documents.])
  fi
  if test "x$BOURNE_SHELL" = "x"; then
     AC_MSG_ERROR([No Bourne shell -- used in several scripts.])
  fi
  if test "x$JAVAC" = "x"; then
     AC_MSG_ERROR([No Java compiler "javac" -- used to compile UI tools.])
  fi
  if test "x$OPENSSL" = "x" ; then
     AC_MSG_ERROR([OpenSSL is missing -- needed to set up security context.])
  fi
  if test "x$USE_STUNNEL" = "true" -a "x$STUNNEL" = "x"; then
     AC_MSG_ERROR([No stunnel found.])
  fi
fi

# check to see which service framework is preferred

AC_SUBST(WEB_SERVICE_FRAMEWORK)
WEB_SERVICE_FRAMEWORK=
AC_MSG_CHECKING(which Web services framework to use)
if test "$python_has_tornado" != "no"; then
  AC_ARG_ENABLE(tornado, [  --enable-tornado], v="$enableval", v="no")
  if test "x$v" = "xyes"; then
    version=`$PYTHON -c "from tornado import version; print (tuple([int(x) for x in version.split('.')]) >= (1, 2))"`
    if test "$version" = "True"; then
      WEB_SERVICE_FRAMEWORK="Tornado"
    else
      version=`$PYTHON -c "from tornado import version; print version"`
      AC_MSG_ERROR([Can't use Tornado version $version; need version 1.2 or better])
    fi
  fi
fi
if test "x$WEB_SERVICE_FRAMEWORK" = "x"; then
  if test "$python_has_medusa" = "yes"; then
    WEB_SERVICE_FRAMEWORK=Medusa
  else
    AC_MSG_ERROR("Need either Medusa or Tornado to run")
  fi
fi
AC_MSG_RESULT($WEB_SERVICE_FRAMEWORK)

# we need to know if stunnel is version 3 or 4

AC_MSG_CHECKING(version of stunnel)
if test "$OS_TARGET" = "win32"; then
  STUNNEL_VERSION=4
else
  STUNNEL_VERSION_STRING4="`$STUNNEL -version 2>&1 | head -1`"
  STUNNEL_VERSION_STRING3="`$STUNNEL -V 2>&1 | head -2 | tail -1`"
  STUNNEL_VERSION=[`$PYTHON -c "\
import re
m = re.match('stunnel ([0-9]+)\.([0-9]+) on.*', '$STUNNEL_VERSION_STRING3')
if not m:
   m = re.match('stunnel ([0-9]+)\.([0-9]+) on.*', '$STUNNEL_VERSION_STRING4')
if m:
   print m.group(1)
else:
 print 0
"`]
fi
AC_MSG_RESULT($STUNNEL_VERSION)
if test "$STUNNEL_VERSION" = "3" ; then
  AC_MSG_ERROR([stunnel version 3 is no longer supported.  You must upgrade to stunnel 4 to run this version of UpLib.])
fi
AC_SUBST(STUNNEL_VERSION)

# Check for optional programs

AC_PATH_PROG(MAKEWHATIS, "makewhatis", , $PATH:/usr/libexec:/usr/sbin)

AC_PATH_PROG(SCORETEXT, "scoretext")
AC_ARG_WITH(scoretext, [  --with-scoretext=EXECUTABLE], scoretext=$with_scoretext, scoretext=$SCORETEXT)
if test "$scoretext" = "no"; then
  SCORETEXT=""
  AC_MSG_RESULT([Not using scoretext, by explicit direction.])
elif test "$scoretext" = "yes"; then
  AC_MSG_RESULT(Using scoretext executable $SCORETEXT)
elif test "x$scoretext" = ""; then
  SCORETEXT=""
  AC_MSG_RESULT([Not using scoretext, by explicit direction.])
fi
  
if test "X$SCORETEXT" != "X"; then
  AC_MSG_CHECKING(for scoretext language model file)
  AC_ARG_WITH(scoretextmodel, [  --with-scoretextmodel=SCORETEXTMODELPATH], scoretextmodel_path=$with_scoretextmodel, scoretextmodel_path="")
  if test "x$scoretextmodel_path" = "x"; then
    scoretextmodel_path="/project/uplib/langmodel_brown_5_05"
    if test -e $scoretextmodel_path; then
      AC_MSG_RESULT([using default $scoretextmodel_path.])
      SCORETEXTMODEL=$scoretextmodel_path
    elif test -e "${prefix}/lib/langmodel_brown_5_05"; then
      SCORETEXTMODEL=${prefix}/lib/langmodel_brown_5_05
      AC_MSG_RESULT([using $SCORETEXTMODEL.])
    else
      AC_MSG_RESULT("not found; scoretext will not be used")
      SCORETEXT=""
      SCORETEXTMODEL=""
    fi
  else
    if test ! -e $scoretextmodel_path; then
      AC_MSG_ERROR([given scoretext model $scoretextmodel_path does not exist; use --with-scoretextmodel=PATH to specify a valid path for a scoretext language model file])
    else
      AC_MSG_RESULT($scoretextmodel_path)
      SCORETEXTMODEL=$scoretextmodel_path
    fi
  fi
fi
AC_SUBST(SCORETEXTMODEL)

AC_PATH_PROG(ENSCRIPT, "enscript")
AC_PATH_PROG(NENSCRIPT, "nenscript")
AC_PATH_PROG(FILE, "file")
AC_PATH_PROG(KILL, "kill")
AC_ARG_WITH(htmldoc, [  --with-htmldoc=HTMLDOC_PATH], HTMLDOC=$with_htmldoc, HTMLDOC="")
if test "x$HTMLDOC" = "x"; then
  AC_PATH_PROG(HTMLDOC, "htmldoc")
else
  AC_MSG_CHECKING(for htmldoc)
  AC_MSG_RESULT($HTMLDOC)
fi
AC_PATH_PROG(WKPDF, "wkpdf")
AC_PATH_PROG(WKHTMLTOPDF, "wkhtmltopdf")
if test "x$WKHTMLTOPDF" != "x"; then
   version=`$WKHTMLTOPDF --version | grep wkhtmltopdf | $PYTHON -c 'import sys; print sys.stdin.readlines()[[0]].split()[[1]]'`
   if test "x$version" != "x-"; then
     usable=`$PYTHON -c "v = [[int(x) for x in '${version}'.split('.')]]; print (v >= [[0, 9, 0]])"`
     if test "$usable" != "True"; then
         AC_MSG_RESULT(Can't use $WKHTMLTOPDF version $version; need 0.9.0 or later)
         WKHTMLTOPDF=""
     fi
   fi
fi
AC_PATH_PROG(WEBKIT2PDF, "webkit2pdf")

locations="$PATH"
[if test "$OS_TARGET" = "Darwin"; then
  for target in /Applications/OpenOffice.org* ; do
    if test -d "${target}" ; then
       locations="${locations}:${target}/Contents/MacOS"
    fi
  done
elif test "$OS_TARGET" = "Linux"; then
  # Ubuntu seems to use /usr/lib/openoffice/program
  locations="/usr/lib/openoffice.org3/program:/usr/lib64/openoffice.org3/program:/usr/lib/openoffice/program:/usr/lib/openoffice.org/program:/usr/lib64/openoffice/program:/usr/lib64/openoffice.org/program:${locations}"
elif test "$OS_TARGET" = "win32"; then
  for target in /c/Program\ Files/OpenOffice.org* ; do
    if test -d "${target}" ; then
       locations="${locations};${target}/program"
    fi
  done
fi]

XVFB=
XVFB_ARGS=
AC_SUBST(XVFB_ARGS)
AC_SUBST(XVFB)
AC_PATH_PROGS(OPENOFFICE, [soffice openoffice.org],, [$locations])
AC_PATH_PROG(UNOPKG, [unopkg],, [$locations])
AC_SUBST(USE_OPENOFFICE_FOR_WEB)
AC_SUBST(USE_OPENOFFICE_FOR_MSOFFICE)
# what version of OpenOffice?
if test "x$OPENOFFICE" != "x" ; then
  AC_MSG_CHECKING(version of OpenOffice)
  versionrc=`dirname "$OPENOFFICE"`/versionrc
  oo_version=`grep OOOBaseVersion= "$versionrc" | sed -e 's/OOOBaseVersion=//' | "$PYTHON" -c "[import sys; print sys.stdin.readline().split('.')[0]]"`
  #  oo_version=`"$OPENOFFICE" -headless '-?' 2>&1 | head -1 | 
  AC_MSG_RESULT([$oo_version])
  if test "$OS_TARGET" != "Darwin" -o $oo_version -lt 3; then
    AC_PATH_PROG(XVFB, "Xvfb",, [$PATH:/usr/X11R6/bin:/usr/X11/bin])
    if test "x$XVFB" = "x" ; then
      AC_PATH_PROG(XVFB, "Xfake",, [$PATH:/usr/X11R6/bin:/usr/X11/bin])
      if test "x$XVFB" != "x"; then
         XVFB_ARGS="-kb"
      fi
    fi
  fi
  if test "x$OPENOFFICE" = "x" -o "x$UNOPKG" = "x" ; then
    USE_OPENOFFICE_FOR_WEB=false
    USE_OPENOFFICE_FOR_MSOFFICE=false
  elif test $oo_version -le 2 -a "$OS_TARGET" != "win32" -a "x$XVFB" = "x"; then
    USE_OPENOFFICE_FOR_WEB=false
    USE_OPENOFFICE_FOR_MSOFFICE=false
  elif test $oo_version -gt 2 -a "$OS_TARGET" = "Darwin"; then
    # OO 3 on OS X doesn't need X11
    USE_OPENOFFICE_FOR_WEB=true
    USE_OPENOFFICE_FOR_MSOFFICE=true
  else
    USE_OPENOFFICE_FOR_WEB=true
    USE_OPENOFFICE_FOR_MSOFFICE=true
  fi
  if test "$USE_OPENOFFICE_FOR_WEB" = "true"; then
    AC_MSG_RESULT([Using OpenOffice for HTML rendering...])
  fi
  if test "$USE_OPENOFFICE_FOR_MSOFFICE" = "true"; then
    AC_MSG_RESULT([Using OpenOffice for Microsoft Office rendering...])
  fi
  if test "$USE_OPENOFFICE_FOR_MSOFFICE" = "true" -a "$USE_OPENOFFICE_FOR_WEB" = "true"; then
    AC_MSG_RESULT([

****   Please close any open OpenOffice windows before running "make install".   ****

  ])
  fi
fi

# check for findimages -- use or build

AC_ARG_WITH(leptonica, [  --with-leptonica=WHERE], lepthome=$with_leptonica, lepthome="")
if test "x$lepthome" != "x"; then
  CPPFLAGS="$CPPFLAGS -I${lepthome}/include/leptonica -I${lepthome}/include/liblept"
  LDFLAGS="$LDFLAGS -L${lepthome}/lib"
fi
AC_PATH_PROG(FINDIMAGES, "findimages",, )
can_build_findimages="yes"
AC_CHECK_HEADER(png.h,, can_build_findimages="png.h",)
AC_CHECK_HEADER(tiff.h,, can_build_findimages="tiff.h",)
AC_CHECK_HEADER(tiffio.h,, can_build_findimages="tiffio.h",)
AC_CHECK_HEADER(allheaders.h,, can_build_findimages="allheaders.h (from leptonica)",)
AC_CHECK_LIB(z, deflate, , can_build_findimages="libz",)
AC_CHECK_LIB(png, png_get_libpng_ver, , can_build_findimages="libpng",)
AC_CHECK_LIB(jpeg, jpeg_CreateDecompress, , can_build_findimages="libjpeg",)
AC_CHECK_LIB(tiff, TIFFFillTile, , can_build_findimages="libtiff",)
AC_CHECK_LIB(lept, pixCreate, , can_build_findimages="leptonica", -ljpeg -lpng -ltiff -lz)
AC_SUBST(LIBLEPT_GT_1_50)
AC_CHECK_LIB(lept, pixGetGrayHistogram, LIBLEPT_GT_1_50="-DLIBLEPT_GT_1_50", LIBLEPT_GT_1_50=, -ljpeg -lpng -ltiff -lz)

AC_SUBST(BUILD_FINDIMAGES)
if test "$can_build_findimages" = "yes"; then
   BUILD_FINDIMAGES=yes
   FINDIMAGES=${UPLIB_BIN}/findimages
else
   BUILD_FINDIMAGES=
   AC_MSG_RESULT([can't re-build findimages, missing or bad $can_build_findimages])
fi

# check for a DNS nameserver (not required)

AC_MSG_CHECKING(for DNS nameserver)
AC_SUBST(DNS_NAMESERVER)
AC_ARG_WITH(dns-nameserver, [  --with-dns-nameserver=MACHINE], DNS_NAMESERVER=$with_dns_nameserver, DNS_NAMESERVER="")
if test "x$DNS_NAMESERVER" = "x"; then
  AC_MSG_RESULT(not used)
else
  AC_MSG_RESULT($DNS_NAMESERVER)
fi

# check for docutils (only needed to regenerate the docs)

AC_PATH_PROGS(RST2HTML, [rst2html rst2html.py], , [$PATH:${python_bin_dir}:/usr/local/bin:/sw/bin])
AC_PATH_PROGS(RST2LATEX, [rst2latex rst2latex.py], , [$PATH:${python_bin_dir}:/usr/local/bin:/sw/bin])
AC_PATH_PROG(PDFLATEX, "pdflatex", , [$PATH:/usr/local/bin:/usr/texbin:/sw/bin])
AC_PATH_PROGS(EPYDOC, [epydoc epydoc.py], , [$PATH:${python_bin_dir}:/usr/local/bin:/sw/bin])

# check for some Windows-specific programs
AC_PATH_PROG(DIRUSE, "diruse.exe")

# Checks for libraries.

AC_SUBST(HAVE_TEXTCAT)
AC_CHECK_LIB(textcat, textcat_Classify, HAVE_TEXTCAT=true, HAVE_TEXTCAT=false,)

AC_SUBST(LUCENE_USER_SUPPLIED)
LUCENESUPPLIED="`(cd java; ls lucene-core-2.*.jar)`"
AC_SUBST(LUCENEBUILD)
LUCENEBUILD=
AC_SUBST(LUCENEJAR)
LUCENEJAR=
if test "$USE_PYLUCENE" != "jcc" -a "x$JAVAC" != "x"; then
  AC_MSG_CHECKING(for Lucene library)
  AC_ARG_WITH(lucene, [  --with-lucene=LUCENE-JAR-PATH], lucene_path=$with_lucene, lucene_path="")
  if test "x$lucene_path" = "x"; then
    lclasspath="${CLASSPATH:-.}${JAVACLASSPATHSEP}./java"
    result=`["$JAVAC" -classpath "$lclasspath" java/testClass.java ; "$JAVA" -classpath "$lclasspath" testClass org.apache.lucene.index.Term]`
    if test "$result" != "0"; then
      LUCENEBUILD="`pwd`/java/${LUCENESUPPLIED}"
      LUCENEJAR="${UPLIB_CODE}/${LUCENESUPPLIED}"
      LUCENE_USER_SUPPLIED=false
      AC_MSG_RESULT([using supplied Lucene 2 jar file at $LUCENEBUILD])
    else
      LUCENEJAR=${CLASSPATH:-}
      LUCENEBUILD=$LUCENEJAR
      LUCENE_USER_SUPPLIED=true
      AC_MSG_RESULT([on CLASSPATH ($LUCENEJAR)])
    fi
  elif test -r "$lucene_path"; then
    LUCENEJAR="$lucene_path"
    LUCENEBUILD="$lucene_path"
    LUCENE_USER_SUPPLIED=true
    AC_MSG_RESULT([user specified $LUCENEJAR])
  else
    AC_MSG_ERROR([Can't read specified Lucene jar file $lucene_path.])
  fi
  
  AC_SUBST(LUCENEBUILD_MSYS)
  LUCENEBUILD_MSYS="$LUCENEBUILD"
  
  AC_SUBST(LUCENEVERSION)
  AC_MSG_CHECKING(whether this version of Lucene is UpLib-compatible)
  if test "x$LUCENEBUILD" != "x"; then
    if test "$OS_TARGET" = "win32"; then
       LUCENEBUILD=`./win32/de-msys "$LUCENEBUILD"`
    fi
    lclasspath="${LUCENEBUILD}${JAVACLASSPATHSEP}${CLASSPATH:-.}${JAVACLASSPATHSEP}./java"
    result=`["$JAVAC" -classpath "$lclasspath" java/testLucene.java ; "$JAVA" -classpath "$lclasspath" testLucene]`
    AC_MSG_RESULT([$result])
    if test "$result" = "no"; then
      AC_MSG_ERROR([Lucene 2.4 or higher required.])
    else
      LUCENEVERSION="$result"
    fi
  fi
fi

AC_SUBST(JPENJAR)
JPENJAR=
AC_MSG_CHECKING(for JPen library)
AC_ARG_WITH(jpen, [  --with-jpen=JPEN-JAR-PATH], jpen_path=$with_jpen, jpen_path="")
if test "x$jpen_path" = "x" -a "x$JAVAC" != "x"; then
  lclasspath="${CLASSPATH:-.}${JAVACLASSPATHSEP}./java"
  result=`["$JAVAC" -classpath "$lclasspath" java/testClass.java ; "$JAVA" -classpath "$lclasspath" testClass com.parc.tablet.PenEvent]`
  if test "$result" != "0"; then
    JPENJAR="`pwd`/java/JPen.jar"
    AC_MSG_RESULT([using supplied JPen jar file at $JPENJAR])
  else
    JPENJAR=${CLASSPATH:-}
    AC_MSG_RESULT([on CLASSPATH ($JPENJAR)])
  fi
elif test -r $jpen_path; then
  JPENJAR=$jpen_path
  AC_MSG_RESULT([$JPENJAR])
else
  AC_MSG_ERROR([Can't read specified JPen jar file $jpen_path.])
fi

AC_MSG_CHECKING(for Simple Java Web service framework)
AC_SUBST(SIMPLE)
AC_ARG_WITH(simple-dist, [  --with-simple-dist=SIMPLE-ZIP-PATH], simple_path=$with_simple_dist, simple_path="")
if test "x$simple_path" = "x"; then
  AC_MSG_RESULT(no)
elif test -r "$simple_path"; then
  SIMPLE="$simple_path"
  AC_MSG_RESULT([user specified $SIMPLE])
else
  AC_MSG_ERROR([Can't read specified Simple distribution zip file $simple_path.])
fi

AC_MSG_CHECKING(for JODConverter 3)
AC_SUBST(JODCONVERTER)
AC_ARG_WITH(jodconverter-dist, [  --with-jodconverter-dist=JODCONVERTER-ZIP-PATH], jodpath=$with_jodconverter_dist, jodpath="")
if test "x$jodpath" = "x"; then
  AC_MSG_RESULT(no)
elif test -r "$jodpath"; then
  JODCONVERTER="$jodpath"
  AC_MSG_RESULT([user specified $JODCONVERTER])
else
  AC_MSG_ERROR([Can't read specified JODConverter distribution zip file at $jodpath.])
fi

AC_SUBST(TOPDF_PORT)
AC_SUBST(USE_TOPDF_FOR_MSOFFICE)
AC_SUBST(USE_TOPDF_FOR_WEB)
AC_ARG_WITH(topdf-port, [  --with-topdf-port=PORT], TOPDF_PORT=$with_topdf_port, TOPDF_PORT=10880)
if test "x$SIMPLE" != "x" -a "x$JODCONVERTER" != "x"; then
   if test "x$OPENOFFICE" != "x" -a "x$oo_version" != "x"; then
      if test $oo_version -gt 2; then
        USE_TOPDF_FOR_MSOFFICE=true
        USE_OPENOFFICE_FOR_MSOFFICE=false
        AC_MSG_RESULT([Using ToPDF server for Office to PDF conversions, port $TOPDF_PORT])
      else
        USE_TOPDF_FOR_MSOFFICE=false
      fi
   else
      USE_TOPDF_FOR_MSOFFICE=false
   fi
   if test "x$WKPDF" != "x" -o "x$WKHTMLTOPDF" != "x" -o "x$WEBKIT2PDF" != "x" ; then
      USE_TOPDF_FOR_WEB=true
      USE_OPENOFFICE_FOR_WEB=false
      AC_MSG_RESULT([Using ToPDF server for HTML to PDF conversions, port $TOPDF_PORT])
   else
      USE_TOPDF_FOR_WEB=false
   fi
else
   USE_TOPDF_FOR_WEB=false
   USE_TOPDF_FOR_MSOFFICE=false
fi

AC_SUBST(PREREQS_DIR)
PREREQS_DIR=
AC_MSG_CHECKING(for a directory of prerequisite programs for the installer)
AC_ARG_WITH(prereqs, [  --with-prereqs=PREREQS-PATH], prereqs_path=$with_prereqs, prereqs_path="")
if test "x$prereqs_path" = "x"; then
  AC_MSG_RESULT(not specified)
elif test "x$prereqs_path" = "xno"; then
  AC_MSG_RESULT(deliberately omitted)
else
  PREREQS_DIR="$prereqs_path"
  AC_MSG_RESULT([$prereqs_path])
fi

# we need unzip, but only to unpack the simple and jodconverter files, so be liberal in where to look for it
AC_PATH_PROGS(UNZIP, [unzip unzip.exe],, [${PREREQS_DIR}:${PATH}])

# Check for which charset the user will use to interact with the repository, for editing metadata values

AC_MSG_CHECKING(metadata interaction charset encoding)
AC_ARG_WITH(interaction-charset, [  --with-interaction-charset=CHARSET], charset=$with_interaction_charset, charset="UTF-8")
AC_SUBST(INTERACTION_CHARSET)
[$PYTHON -c "'a'.encode('$charset')" >/dev/null 2>&1]
supported="$?"
if test "$supported" = "0"; then
  INTERACTION_CHARSET=$charset
  AC_MSG_RESULT([$charset])
else
  AC_MSG_ERROR([Invalid charset encoding "$charset" specified.  You must use the Python name for the charset encoding.])
fi

# Checks for header files.

# Checks for typedefs, structures, and compiler characteristics.

# Checks for library functions.

# Now post-process everything to Windows, if necessary

# need to keep copies of UNIX-style versions for msys "install"
AC_SUBST(UPLIB_HOME_MSYS)
AC_SUBST(UPLIB_SHARE_MSYS)
AC_SUBST(UPLIB_EXEC_MSYS)
AC_SUBST(UPLIB_LIB_MSYS)
AC_SUBST(UPLIB_BIN_MSYS)
AC_SUBST(UPLIB_CODE_MSYS)
AC_SUBST(PYTHON_MSYS)
AC_SUBST(PREREQS_DIR_MSYS)
UPLIB_HOME_MSYS="$UPLIB_HOME"
UPLIB_SHARE_MSYS="$UPLIB_SHARE"
UPLIB_EXEC_MSYS="$UPLIB_EXEC"
UPLIB_LIB_MSYS="$UPLIB_LIB"
UPLIB_BIN_MSYS="$UPLIB_BIN"
UPLIB_CODE_MSYS="$UPLIB_CODE"
PYTHON_MSYS="$PYTHON"
PREREQS_DIR_MSYS="$PREREQS_DIR"
LUCENE_BUILD_MSYS="$LUCENEBUILD"

if test "$OS_TARGET" = "win32"; then

  if test "x$RST2HTML" = "x"; then
    # if we didn't have the docutils, just fake it
    RST2HTML="echo"
    RST2LATEX="$RST2HTML"
    PDFLATEX="$RST2HTML"
  fi

  UPLIB_HOME=`./win32/de-msys "$UPLIB_HOME"`
  UPLIB_SHARE=`./win32/de-msys "$UPLIB_SHARE"`
  UPLIB_EXEC=`./win32/de-msys "$UPLIB_EXEC"`
  UPLIB_LIB=`./win32/de-msys "$UPLIB_LIB"`
  UPLIB_BIN=`./win32/de-msys "$UPLIB_BIN"`
  UPLIB_CODE=`./win32/de-msys "$UPLIB_CODE"`
  UPLIB_ADD_PROGRAM=`./win32/de-msys "$UPLIB_ADD_PROGRAM"`
  UPLIB_GET_PROGRAM=`./win32/de-msys "$UPLIB_GET_PROGRAM"`
  UPLIB_CHECK_ANGEL_PROGRAM=`./win32/de-msys "$UPLIB_CHECK_ANGEL_PROGRAM"`
  UPLIB_SITE_PACKAGES_PLAT=`./win32/de-msys "$UPLIB_SITE_PACKAGES_PLAT"`
  UPLIB_SITE_PACKAGES_NONPLAT=`./win32/de-msys "$UPLIB_SITE_PACKAGES_NONPLAT"`
  PYTHON=`./win32/de-msys "$PYTHON"`
  PYTHON_LIBDIR=`./win32/de-msys "$PYTHON_LIBDIR"`
  PYCHECKER=`./win32/de-msys "$PYCHECKER"`
  TAR=`./win32/de-msys "$TAR"`
  JASPER=`./win32/de-msys "$JASPER"`
  JAVAHOME=`./win32/de-msys "$JAVAHOME"`
  JAVA=`./win32/de-msys "$JAVA"`
  JAVAC=`./win32/de-msys "$JAVAC"`
  JAVADOC=`./win32/de-msys "$JAVADOC"`
  JAR=`./win32/de-msys "$JAR"`
  UNZIP=`./win32/de-msys "$UNZIP"`
  JAVAC=`./win32/de-msys "$JAVAC"`
  PDFTOTEXT=`./win32/de-msys "$PDFTOTEXT"`
  WORDBOXES_PDFTOTEXT=`./win32/de-msys "$WORDBOXES_PDFTOTEXT"`
  PDFLINKS=`./win32/de-msys "$PDFLINKS"`
  STUNNEL=`./win32/de-msys "$STUNNEL"`
  KEYTOOL=`./win32/de-msys "$KEYTOOL"`
  PDFINFO=`./win32/de-msys "$PDFINFO"`
  DD=`./win32/de-msys "$DD"`
  TIFFSPLIT=`./win32/de-msys "$TIFFSPLIT"`
  TIFFCP=`./win32/de-msys "$TIFFCP"`
  TIFFSET=`./win32/de-msys "$TIFFSET"`
  TIFFINFO=`./win32/de-msys "$TIFFINFO"`
  TIFF2PS=`./win32/de-msys "$TIFF2PS"`
  GHOSTSCRIPT=`./win32/de-msys "$GHOSTSCRIPT"`
  PS2PDF=`./win32/de-msys "$PS2PDF"`
  PDF2PS=`./win32/de-msys "$PDF2PS"`
  BOURNE_SHELL=`./win32/de-msys "$BOURNE_SHELL"`
  OPENSSL=`./win32/de-msys "$OPENSSL"`
  SPLITUP=`./win32/de-msys "$SPLITUP"`
  MKTEMP=`./win32/de-msys "$MKTEMP"`
  MAKEWHATIS=`./win32/de-msys "$MAKEWHATIS"`
  SCORETEXT=`./win32/de-msys "$SCORETEXT"`
  SCORETEXTMODEL=`./win32/de-msys "$SCORETEXTMODEL"`
  ENSCRIPT=`./win32/de-msys "$ENSCRIPT"`
  NENSCRIPT=`./win32/de-msys "$NENSCRIPT"`
  FILE=`./win32/de-msys "$FILE"`
  KILL=`./win32/de-msys "$KILL"`
  HTMLDOC=`./win32/de-msys "$HTMLDOC"`
  PREREQS_DIR=`./win32/de-msys "$PREREQS_DIR"`
  RST2HTML=`./win32/de-msys "$RST2HTML"`
  RST2LATEX=`./win32/de-msys "$RST2LATEX"`
  PDFLATEX=`./win32/de-msys "$PDFLATEX"`
  DIRUSE=`./win32/de-msys "$DIRUSE"`
  LUCENEJAR=`./win32/de-msys "$LUCENEJAR"`
  LUCENEBUILD=`./win32/de-msys "$LUCENEBUILD"`
  JPENJAR=`./win32/de-msys "$JPENJAR"`
  OPENOFFICE=`./win32/de-msys "$OPENOFFICE"`
  UNOPKG=`./win32/de-msys "$UNOPKG"`
  WEBKIT2PDF=`./win32/de-msys "$WEBKIT2PDF"`
  WKPDF=`./win32/de-msys "$WKPDF"`
  WKHTMLTOPDF=`./win32/de-msys "$WKHTMLTOPDF"`
  FINDIMAGES=`./win32/de-msys "$FINDIMAGES"`
fi
AC_SUBST(UPLIB_SITE_PACKAGES)
UPLIB_SITE_PACKAGES="$UPLIB_SITE_PACKAGES_PLAT"
if test "x$UPLIB_SITE_PACKAGES" = "x" ; then
   UPLIB_SITE_PACKAGES="$UPLIB_SITE_PACKAGES_NONPLAT"
else
   UPLIB_SITE_PACKAGES="${UPLIB_SITE_PACKAGES}${JAVACLASSPATHSEP}${UPLIB_SITE_PACKAGES_NONPLAT}"
fi

AC_CONFIG_FILES([replacements reconfigure])

AC_OUTPUT

[chmod +x ./reconfigure; ./reconfigure]
